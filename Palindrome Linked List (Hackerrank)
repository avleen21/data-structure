#include <math.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <assert.h>
#include <limits.h>
#include <stdbool.h>

typedef struct node{
    int data;
    struct node* next;
}node;

node* head = NULL;

void insert(int val){
    node* newnode = (node*)malloc(sizeof(node));
    newnode->data = val;
    newnode->next = NULL;
    
    if(head == NULL) 
        head = newnode;
    
    else{
        node* temp = head;
        while(temp->next != NULL){
            temp = temp->next;
                 
        }
        temp->next = newnode;
    }
}

node* reverseLinkedList(node* head){
    if(head == NULL || head->next == NULL) return head;
    
    node* newhead = reverseLinkedList(head->next);
    node* front = head->next;
    front->next = head;
    head->next = NULL;
    
    return newhead;
}

bool isPalindrome(node* head){
    if(head == NULL || head->next == NULL){
        printf("Yes");
        return true;
    }
    else{
        node* slow = head;
        node* fast = head;
        
        while(fast != NULL && fast->next != NULL){
            slow = slow->next;
            fast = fast->next->next;
        }
        node* newhead = reverseLinkedList(slow);
        node* first = head;
        node* second = newhead;
        
        while(second!= NULL){
            if(first->data != second->data){
                reverseLinkedList(newhead);
                printf("No");
                return false;
            }
            first = first->next;
            second = second->next;
        }
        reverseLinkedList(newhead);
        printf("Yes");
    }
    return 0;
}



int main() {
    int n,val;
    scanf("%d",&n);
    for(int i=0;i<n;i++){
        scanf("%d",&val);
        insert(val);
    }
    //reverseLinkedList(head);
    isPalindrome(head);
    return 0;
}
