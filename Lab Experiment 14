#include<stdio.h>         
#include<stdlib.h>
#define MAX 100

int tree[MAX];
void init(){          // initialization
    for(int i=0; i<MAX; i++){
        tree[i] = -1;
    }
}

void insert(int value, int root){
    if(tree[root] == -1)
        tree[root] = value;        
    else if(value < tree[root])    
        insert(value, 2*root+1);   

    else if(value > tree[root])    
        insert(value, 2*root+2);    
}

void preorder(int root){
    if(tree[root] == -1)
        return;
    printf("%d ",tree[root]);     //visit root
    preorder(2*root+1);          // left child
    preorder(2*root+2);          // right child
}

void inorder(int root){
    if(tree[root]==-1)
        return;
    inorder(2*root+1);       // left child
    printf("%d ",tree[root]);   //visit root
    inorder(2*root+2);        //right child
}

void postorder(int root){
    if(tree[root] == -1)
        return;
    postorder(2*root+1);    // left child
    postorder(2*root+2);    // right child
    printf("%d ",tree[root]);  // visit root
}

/*int search(int target){
    int i=0;
    while(i<MAX && tree[i] != -1){
        if(tree[i] == target)
            return i;
        else if(target < tree[i])
            i = 2*i+1;
        else   
            i = 2*i+2;
    }
    return -1;
}*/

int search(int i, int target){
    if(i>=MAX && tree[i] == -1)
        return -1;

    else if(tree[i] == target)       // if target is found, return i
        return i;

    else if(target < tree[i])         // if target is less than the element , left search 
        return search(2*i+1, target);

    else   
        return search(2*i+2, target);   // if target is greater than the element, right search 
}

int findMin(int i){
    while(i<MAX && tree[2*i+1] != -1){
        i = 2*i+1;
    }
    return i;
}

int findMax(int i){                  
    while(i<MAX && tree[2*i+2] != -1){
        i = 2*i+2;
    }
    return i;
}

void delete(int i, int value){
    i = search(i, value);
    if(i == -1)
        printf("Element not found!!!\n");
    else{
        int left = 2*i+1;
        int right = 2*i+2;
        if((left>=MAX || tree[left] == -1) && (right>=MAX || tree[right] == -1))          // Having zero child
            tree[i] = -1; 
        // else if(tree[left] == -1){                 // Having right child only
        //     int min = findMin(right);
        //     tree[i] = tree[min];
        //     delete(min, tree[min]);
        // }
        else if(tree[right] == -1){               // Having left child only
            int max = findMax(left);
            tree[i] = tree[max];
            delete(max, tree[max]);
        }
        else{                              // Having two children or Having right child only
            int min = findMin(right);
            tree[i] = tree[min];
            delete(min, tree[min]);
        }
    }
}

int main(){
    init();
    int n, choice, index;
    while(1){
        printf("1. Insert\n");
        printf("2. Preorder\n");
        printf("3. Inorder\n");
        printf("4. Postorder\n");
        printf("5. Search\n");
        printf("6. Delete\n");
        printf("7. Exit\n");
        printf("Enter choice : ");
        scanf("%d",&choice);
        switch(choice){
            case 1:
                printf("Enter the value : ");
                scanf("%d",&n);
                insert(n,0);
                break;
            case 2:
                printf("\nPreorder : ");
                preorder(0);
                break;
            case 3:
                printf("\nInorder : ");
                inorder(0);
                break;
            case 4:
                printf("\nPostorder : ");
                postorder(0);
                break;
            case 5:
                printf("Enter value : ");
                scanf("%d",&n);
                index = search(0,n);
                if(index==-1)
                    printf("Not Found!!\n");
                else
                    printf("Found!!\n");
                    break;
            case 6:
                printf("Enter value : ");
                scanf("%d",&n);
                delete(0, n);
                break;
            case 7:
                exit(0);
            default:
                printf("Invalid Choice!!\n");
        }
        printf("\n");
    }
    return 0;
}
